import org.gradle.internal.os.OperatingSystem

plugins {
    id 'net.ltgt.errorprone' version '0.0.8'
    id 'edu.wpi.first.wpilib.versioning.WPILibVersioningPlugin' version '1.2'
}

allprojects {
    repositories {
        mavenCentral()
    }
}

// Determine what repo to publish to. Default is development. Valid options are development, beta, stable, and release
if (!hasProperty('repo')) {
    allprojects {
        ext.repo = 'development'
    }
}

ext.includeJava = !project.hasProperty('skipJava')


ext.getPlatformPath = { binary ->
    if (binary.targetPlatform.architecture.arm) {
        return 'Linux/arm'
    } else {
        return binary.targetPlatform.operatingSystem.name + '/' + binary.targetPlatform.architecture.name
    }
}

ext.setupDefines = { project, binaries ->
    binaries.all {
        if (project.hasProperty('debug')) {
            project.setupDebugDefines(cppCompiler, linker)
        } else {
            project.setupReleaseDefines(cppCompiler, linker)
        }
    }
}

ext.addUserLinks = { linker, targetPlatform, implLib ->
    def libPattern = /.*((\\/|\\).*)+lib(?<libName>.+).(.+)$/
    def libraryArgs = []
    def libraryPath = file('libraries/navxDriver/lib').path

    // adds all libraries found in the driver folder
    def libraryTree = fileTree(libraryPath)
    libraryTree.include '*.so'
    libraryTree.include '*.a'

    libraryTree.each { lib ->
        def nameMatcher = (lib.path =~ libPattern)
        if (nameMatcher[0].size() > 1) {
            def name = nameMatcher.group('libName')
            libraryArgs << '-l' + name
        }
    }
    
    if (implLib) {
        // adds all libraries found in the impl folder
        def implLibraryPath = file('libraries/navx/lib').path
        def implLibraryTree = fileTree(implLibraryPath)
        implLibraryTree.include '*.so'
        implLibraryTree.include '*.a'

        implLibraryTree.each { lib ->
            def nameMatcher = (lib.path =~ libPattern)
            if (nameMatcher[0].size() > 1) {
                def name = nameMatcher.group('libName')
                libraryArgs << '-l' + name
            }
        }
    }
     
    // Add all arguments
    String architecture = targetPlatform.architecture
    if (architecture.contains('arm')){
        linker.args << '-L' + libraryPath
        linker.args.addAll(libraryArgs)
    }
}

apply from: "dependencies.gradle"

ext.releaseDir = file("${rootDir}/release")
apply from: "navx.gradle"

// Empty task for build so that ntcoreSourceZip and navxDriverSourceZip will be
// built when running ./gradlew build
task build

build.dependsOn navxSourceZip

task clean(type: Delete) {
    description = "Deletes the build directory"
    group = "Build"
    delete buildDir
}

clean {
    delete releaseDir
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.0'
}
